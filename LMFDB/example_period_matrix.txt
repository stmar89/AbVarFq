/* vim: set syntax=magma :*/
/*
    To compute period matrices of PPAV's in a given isogeny class.
*/


// clone the AlgEt repo stmar89: link https://github.com/stmar89/AlgEt
// modify the following line accodingly.
    fld_AlgEt:="~/packages_github/AlgEt/";

// clone the AbvarFq repo from the fork on roed314: link https://github.com/roed314/AbVarFq 
// modify the following line accodingly.
    fld_AbVarFq:="~/packages_github/AbVarFq/";

// Attach spec and packages
    AttachSpec(fld_AlgEt cat "spec");
    Attach(fld_AbVarFq cat "LMFDB/padictocc.m");
    Attach(fld_AbVarFq cat "LMFDB/polarizations.m");
//    Attach(fld_AbVarFq cat "LMFDB/labelling_wk_classes.m"); //not needed here
//    Attach(fld_AbVarFq cat "LMFDB/lmfdb.m"); //not needed here, overwrites the bugged SplitPrimes

// Download the output of the principal polarization computation from David Roe's website.
// link: https://math.mit.edu/~roed/ppol_output_2023_05_15.tar
// The folder should contain files like 2.11.d_d_ppavs.txt
// Change the following line accordingly. 
    fld_PPAVs:="~/266_wk_icm_rec/polarizations/parallel/output/";
// NB this data is constructed using representatives which are not canonical. 
// The purpose is to experiment with PeriodMatrices



// Let's say that we you want to copute the period matrices of the ppavs in the isogeny class given by
    label:="2.5.ac_g";
//    label:="3.3.a_e_ab";
// Load them using
    S:=LoadPrincipalPolarizationsIsogenyClass(Read(fld_PPAVs cat label cat "_ppavs.txt"));
    ppavs:=PrincipalPolarizationsIsogenyClass(S);
// See the documentation of the above intrinsics for more info.
    PHI:=CMType(ppavs[1,2,1]);
    for p in ppavs do
        pps:=p[2];
        for pp in pps do
            PM:=PeriodMatrix(p[1],pp,PHI);
            PM;
        end for;
    end for;
// If you want to increase the precision of the output:
    ChangePrecision(~PHI,1000);
    for p in ppavs do
        pps:=p[2];
        for pp in pps do
            PM:=PeriodMatrix(p[1],pp,PHI);
            PM;
        end for;
    end for;

// Another example
// In 2.5.ac_j there is only PPAV and there is a Jacobian in the class.
    _<x>:=PolynomialRing(Integers());
    f:=x^4-2*x^3+9*x^2-10*x+25;
    A:=EtaleAlgebra(f);
    F:=PrimitiveElement(A);
    g:=Degree(f) div 2;
    q:=Truncate(ConstantCoefficient(f)^(1/g));
    V:=q/F;
    ZFV:=Order([F,V]);
    unpol_isom_classes:=ICM(ZFV);
    PHI:=pAdicPosCMType(A);
    for I in unpol_isom_classes do
        PrincipalPolarizations(I,PHI);
    end for;


