//GetCurrentDirectory()
//ChangeDirectory("C:/Users/tdupuy/Dropbox/computing/AbVarFq");
AttachSpec("packages.spec");

P<x>:=PolynomialRing(Integers());
//f:=x^6-3*x^4-4*x^4-15*x^2+125; not a good choice since there is only one order
//f:=1*x^6-6*x^5+18*x^4-41*x^3+90*x^2-150*x + 125; only has two orders
f:=x^6 - 3*x^4 - 4*x^3 - 15*x^2 + 125;
//is_ordinary:=IsOrdinary(f);
A:=AssociativeAlgebra(f);
//is_weil, q := IsWeil(f);
g := Degree(f)/2;
//K:= AssociativeAlgebra(f);
F:= PrimitiveElement(A);
V:= q/F;
R:= Order([F,q/F]);
OK:= MaximalOrder(R);
k := 2*g;
k := (Integers() ! k); //coerce g to be an integer
//MatZ := MatrixAlgebra(Integers(), k);
//MatQ := MatrixAlgebra(Rationals(),k);

load "graph_builder.m"; //Attaching packages needs intrinsics?

//This is the basis that we are using for the LMFDB
std_beta := Reverse([V^i : i in [0..g-1]]) cat [F^i : i in [1..g] ]; //lmfdb-basis as power basis
chg_of_basis:=Transpose(Matrix(std_beta)); //lmfdb-basis to power-basis 
//chg_of_basis:= (MatQ ! chg_of_basis); //coerce into an integer matrix
inverse_chg_of_basis:=chg_of_basis^-1;

ordersR :=FindOverOrders(R);
sordersR := Sort(ordersR, CompareOrders);

//Describes the permutation of the orders according to our sorts
permutation:= [Position(sordersR, O) : O in ordersR];

//There is also functionality for comparing lattices
icmR := ICM(R);
I5 := icmR[5];
O5:=MultiplicatorRing(I5);
order_label_5:=Position(sordersR,O5);

//There is also functionality for comparing lattices
I2 := icmR[2];
CompareLattices(I5,I2);



