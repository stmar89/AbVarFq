/* vim: set syntax=magma : */

/*
on all my computations_ord:
For each isogeny class, write lines to two files

isomorphism_classes.txt (one line per ideal)
isog_label:frac_ideal:rep_type:is_reduced:cm_elt:is_product
e.g.
1.251.v:{{1,0},{0,1}}:0:f:{21,2}:f
isogeny_classes.txt (one line per class)
isog_label:order_is_bass:order_is_maximal:size
e.g.
1.251.v:t:t:9

*/

function Base26Encode(n)
    alphabet := "abcdefghijklmnopqrstuvwxyz";
    s := alphabet[1 + n mod 26]; n := ExactQuotient(n-(n mod 26),26);
    while n gt 0 do
        s := alphabet[1 + n mod 26] cat s; n := ExactQuotient(n-(n mod 26),26);
    end while;
    return s;
end function;

function Base26Decode(s)
    alphabetbase := StringToCode("a");
    n := 0;
    for c in Eltseq(s) do n := 26*n + StringToCode(c) - alphabetbase; end for;
    return n;
end function;

AttachSpec("packages.spec");

load "packages/printing_reading_functions.txt";

loc:="computations_ord/";

_<x>:=PolynomialRing(Integers());

FOpen:=POpen("ls " cat loc , "r");
s:=Gets(FOpen);
while not IsEof(s) do
    s;
	f,A,R,phi_pos_elt,data:=loadIsogenyClass(loc cat s);
	g:=Degree(f) div 2;
    q:=Integers() ! ((Coefficients(f)[1])^(2/Degree(f)));
    F:=PrimitiveElement(A);
    V:=q/F;
    icm:=[cl[1] : cl in data];
    newbas:=[ V^(g-j) : j in [0..g] ] cat [ F^i : i in [1..g-1] ];
    
    
    str1:=Reverse(Prune(Coefficients(f)))[1..g];
    str2:=".";
    for a in str1 do
        if a lt 0 then
            str2:=str2 cat "a" cat Base26Encode(-a) cat "_";
        else
            str2:=str2 cat Base26Encode(a) cat "_";
        end if;
    end for;
    str2:=Prune(str2);
    isog_label:=Sprintf("%o.%o",g,q) cat str2;
//isog_label:order_is_bass:order_is_maximal:size    
    if IsBass(R) then order_is_bass:="1"; else order_is_bass:="0"; end if;
    if IsMaximal(R) then order_is_maximal:="1"; else order_is_maximal:="0"; end if;
    size:=Sprintf("%o",#icm);
    
    string_isog:=isog_label cat ":" cat order_is_bass cat ":" cat order_is_maximal cat ":" cat size  cat "\n";
    fprintf "isogeny_classes.txt",string_isog;
    
    elt:=Coordinates([phi_pos_elt],newbas)[1];
    den:=LCM([Denominator(x) : x in elt]);
    elt:=[den*x : x in elt];
    cm_elt:="{";
    for coord in elt do
        cm_elt:=cm_elt cat Sprintf("%o,",coord);
    end for;
    cm_elt:=cm_elt cat "}";


    for I in icm do
        printf".";
        _,nI:=IsIntegral(I);
        I0:=nI*I;
        cc:=Coordinates(ZBasis(I0),newbas);
        strI:="{";
        for gen in cc do
            strI:=strI cat "{";
            for coord in gen do
                strI:=strI cat Sprintf("%o,",coord);
            end for;
            strI:=Prune(strI) cat "},";
        end for;
        frac_ideal:=Prune(strI) cat "}";
        if IsProductOfIdeals(I) then 
            is_product:="1";
        else
            is_product:="0";
        end if;
        string:=isog_label cat ":" cat frac_ideal cat ":0:" cat cm_elt cat ":" cat is_product cat "\n";
        fprintf "isomorphism_classes.txt",string;
    end for;
    s:=Gets(FOpen);
end while;
