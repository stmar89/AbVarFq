//ChangeDirectory("C:/Users/tdupuy/Dropbox/computing/AbVarFq");

AttachSpec("packages.spec");

P<x>:=PolynomialRing(Integers());
f:=x^6 - 3*x^4 - 4*x^3 - 15*x^2 + 125;
is_weil, q := IsWeil(f);
is_ordinary:=IsOrdinary(f);
g := Degree(f)/2;
K:= AssociativeAlgebra(f);
F:= PrimitiveElement(K);
V:= q/F;
R:= Order([F,q/F]);
OK := MaximalOrder(R);
//This is the basis that we are using for the LMFDB
std_beta := Reverse([V^i : i in [0..g-1]]) cat [F^i : i in [1..g] ]; //lmfdb-basis as power basis
chg_of_basis:=Transpose(Matrix(std_beta)); //lmfdb-basis to power-basis 
inverse_chg_of_basis:=chg_of_basis^-1;

ordersR :=FindOverOrders(R);
sordersR := Sort(ordersR, CompareOrders);

//IsWeakEquivalent
//IsIsomorphic2
//P, pmap = Picard(S)
//I:=@@pmap(element) 
//element eq pmap(I)


//Describes the permutation of the orders according to our sorts
permutation:= [Position(sordersR, O) : O in ordersR];

//There is also functionality for comparing lattices
icmR := ICM(R);
I5 := icmR[5];
O5:=MultiplicatorRing(I5);
order_label_5:=Position(sordersR,O5);

//There is also functionality for comparing lattices
I2 := icmR[2];
LatticeCompare(I5,I2);

function get_label(I)
/*
INPUT: 
    -I, fractional ideal
OUTPUT: 
    -label, a string
*/
    order_label := "order";
	weak_label := "weak";
	pic_label := "pic;
	label := order_label cat "." cat weak_label cat "." cat pic_label;
	return label;
end function;


weaklingsR := AssociativeArray(ordersR);
for O in ordersR do
    weaklingsO := WKICMbar(O);
	sorted_weaklingsO:=Sort(weaklingsO,CompareLattices);
	weaklingsR[0] := sorted_weaklingsO;
end for;

function OrderLabel(O)
    return Position(O,sorders);
end function;

function WeakLabel(I,S)
/*
INPUT: 
    -I with endomorphism order S
	-S order 
OUTPUT:
    -i integer label among the representatives
	
ASSUMES:
    -An associative array weaklingsR has been computed
*/
     found_it := False;
	 i=0;
	 weaklingsS := weaklingsR[S];
	 while not found_it do
	     J:=weaklingsS[i];
	     found_it := IsWeakEquivalent(I,J);
		 i+:=1;
	 end while;
	 return i;
end function;


function ICM_label(R)
    ordersR := OverOrders(R);
	sorders 
	for S in ordersR:
end function;



